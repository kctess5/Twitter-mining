0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', '-g', 'browserify' ]
2 info using npm@1.3.11
3 info using node@v0.10.21
4 verbose cache add [ 'browserify', null ]
5 verbose cache add name=undefined spec="browserify" args=["browserify",null]
6 verbose parsed url { protocol: null,
6 verbose parsed url   slashes: null,
6 verbose parsed url   auth: null,
6 verbose parsed url   host: null,
6 verbose parsed url   port: null,
6 verbose parsed url   hostname: null,
6 verbose parsed url   hash: null,
6 verbose parsed url   search: null,
6 verbose parsed url   query: null,
6 verbose parsed url   pathname: 'browserify',
6 verbose parsed url   path: 'browserify',
6 verbose parsed url   href: 'browserify' }
7 silly lockFile 84c1c54e-browserify browserify
8 verbose lock browserify /Users/coreywalsh/.npm/84c1c54e-browserify.lock
9 silly lockFile 84c1c54e-browserify browserify
10 silly lockFile 84c1c54e-browserify browserify
11 verbose addNamed [ 'browserify', '' ]
12 verbose addNamed [ null, '*' ]
13 silly lockFile 80140245-browserify browserify@
14 verbose lock browserify@ /Users/coreywalsh/.npm/80140245-browserify.lock
15 silly addNameRange { name: 'browserify', range: '*', hasData: false }
16 verbose url raw browserify
17 verbose url resolving [ 'https://registry.npmjs.org/', './browserify' ]
18 verbose url resolved https://registry.npmjs.org/browserify
19 info trying registry request attempt 1 at 02:46:42
20 verbose etag "8L7BINBI3LRGWJEEKXIE36T09"
21 http GET https://registry.npmjs.org/browserify
22 http 304 https://registry.npmjs.org/browserify
23 silly registry.get cb [ 304,
23 silly registry.get   { server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
23 silly registry.get     etag: '"8L7BINBI3LRGWJEEKXIE36T09"',
23 silly registry.get     date: 'Fri, 25 Oct 2013 06:46:43 GMT',
23 silly registry.get     'content-length': '0' } ]
24 verbose etag browserify from cache
25 silly addNameRange number 2 { name: 'browserify', range: '*', hasData: true }
26 silly addNameRange versions [ 'browserify',
26 silly addNameRange   [ '0.0.1',
26 silly addNameRange     '0.0.2',
26 silly addNameRange     '0.0.3',
26 silly addNameRange     '0.0.4',
26 silly addNameRange     '0.0.5',
26 silly addNameRange     '0.1.0',
26 silly addNameRange     '0.1.1',
26 silly addNameRange     '0.1.2',
26 silly addNameRange     '0.1.3',
26 silly addNameRange     '0.1.4',
26 silly addNameRange     '0.1.5',
26 silly addNameRange     '0.2.0',
26 silly addNameRange     '0.2.1',
26 silly addNameRange     '0.2.2',
26 silly addNameRange     '0.2.3',
26 silly addNameRange     '0.2.4',
26 silly addNameRange     '0.2.5',
26 silly addNameRange     '0.2.6',
26 silly addNameRange     '0.2.7',
26 silly addNameRange     '0.2.8',
26 silly addNameRange     '0.2.9',
26 silly addNameRange     '0.2.10',
26 silly addNameRange     '0.2.11',
26 silly addNameRange     '0.3.0',
26 silly addNameRange     '0.3.1',
26 silly addNameRange     '0.3.2',
26 silly addNameRange     '0.3.3',
26 silly addNameRange     '0.3.4',
26 silly addNameRange     '0.3.5',
26 silly addNameRange     '0.3.6',
26 silly addNameRange     '0.3.7',
26 silly addNameRange     '0.4.0',
26 silly addNameRange     '0.4.1',
26 silly addNameRange     '0.4.2',
26 silly addNameRange     '0.4.3',
26 silly addNameRange     '0.4.4',
26 silly addNameRange     '0.4.5',
26 silly addNameRange     '0.4.6',
26 silly addNameRange     '0.4.7',
26 silly addNameRange     '0.4.8',
26 silly addNameRange     '0.4.9',
26 silly addNameRange     '0.4.10',
26 silly addNameRange     '0.4.11',
26 silly addNameRange     '0.4.12',
26 silly addNameRange     '0.4.13',
26 silly addNameRange     '0.4.14',
26 silly addNameRange     '0.4.15',
26 silly addNameRange     '0.5.0',
26 silly addNameRange     '0.5.1',
26 silly addNameRange     '0.5.2',
26 silly addNameRange     '1.0.0',
26 silly addNameRange     '1.1.0',
26 silly addNameRange     '1.1.1',
26 silly addNameRange     '1.1.2',
26 silly addNameRange     '1.1.3',
26 silly addNameRange     '1.1.4',
26 silly addNameRange     '1.2.0',
26 silly addNameRange     '1.2.1',
26 silly addNameRange     '1.2.2',
26 silly addNameRange     '1.2.3',
26 silly addNameRange     '1.2.4',
26 silly addNameRange     '1.2.5',
26 silly addNameRange     '1.2.6',
26 silly addNameRange     '1.2.7',
26 silly addNameRange     '1.2.8',
26 silly addNameRange     '1.2.9',
26 silly addNameRange     '1.3.0',
26 silly addNameRange     '1.4.0',
26 silly addNameRange     '1.4.1',
26 silly addNameRange     '1.4.2',
26 silly addNameRange     '1.4.3',
26 silly addNameRange     '1.4.4',
26 silly addNameRange     '1.4.5',
26 silly addNameRange     '1.4.6',
26 silly addNameRange     '1.4.7',
26 silly addNameRange     '1.4.8',
26 silly addNameRange     '1.5.0',
26 silly addNameRange     '1.6.0',
26 silly addNameRange     '1.6.1',
26 silly addNameRange     '1.7.0',
26 silly addNameRange     '1.7.1',
26 silly addNameRange     '1.7.2',
26 silly addNameRange     '1.7.3',
26 silly addNameRange     '1.7.4',
26 silly addNameRange     '1.7.5',
26 silly addNameRange     '1.7.6',
26 silly addNameRange     '1.7.7',
26 silly addNameRange     '1.8.0',
26 silly addNameRange     '1.8.1',
26 silly addNameRange     '1.8.2',
26 silly addNameRange     '1.8.3',
26 silly addNameRange     '1.9.0',
26 silly addNameRange     '1.9.1',
26 silly addNameRange     '1.9.2',
26 silly addNameRange     '1.9.3',
26 silly addNameRange     '1.9.4',
26 silly addNameRange     '1.10.0',
26 silly addNameRange     '1.10.1',
26 silly addNameRange     '1.10.2',
26 silly addNameRange     '1.10.3',
26 silly addNameRange     '1.10.4',
26 silly addNameRange     '1.10.5',
26 silly addNameRange     '1.10.6',
26 silly addNameRange     '1.10.7',
26 silly addNameRange     '1.10.8',
26 silly addNameRange     '1.10.9',
26 silly addNameRange     '1.10.11',
26 silly addNameRange     '1.10.12',
26 silly addNameRange     '1.10.13',
26 silly addNameRange     '1.10.14',
26 silly addNameRange     '1.10.15',
26 silly addNameRange     '1.10.16',
26 silly addNameRange     '1.10.17',
26 silly addNameRange     '1.11.0',
26 silly addNameRange     '1.11.1',
26 silly addNameRange     '1.12.0',
26 silly addNameRange     '1.12.1',
26 silly addNameRange     '1.12.2',
26 silly addNameRange     '1.12.3',
26 silly addNameRange     '1.13.0',
26 silly addNameRange     '1.13.1',
26 silly addNameRange     '1.13.2',
26 silly addNameRange     '1.13.3',
26 silly addNameRange     '1.13.4',
26 silly addNameRange     '1.13.5',
26 silly addNameRange     '1.13.6',
26 silly addNameRange     '1.13.8',
26 silly addNameRange     '1.13.9',
26 silly addNameRange     '1.13.10',
26 silly addNameRange     '1.14.0',
26 silly addNameRange     '1.14.1',
26 silly addNameRange     '1.14.2',
26 silly addNameRange     '1.14.3',
26 silly addNameRange     '1.14.4',
26 silly addNameRange     '1.14.5',
26 silly addNameRange     '1.15.0',
26 silly addNameRange     '1.15.1',
26 silly addNameRange     '1.15.2',
26 silly addNameRange     '1.15.3',
26 silly addNameRange     '1.15.4',
26 silly addNameRange     '1.15.5',
26 silly addNameRange     '1.15.6',
26 silly addNameRange     '1.16.0',
26 silly addNameRange     '1.16.1',
26 silly addNameRange     '1.16.2',
26 silly addNameRange     '1.16.3',
26 silly addNameRange     '1.16.4',
26 silly addNameRange     '1.16.5',
26 silly addNameRange     '1.16.6',
26 silly addNameRange     '1.16.7',
26 silly addNameRange     '1.16.8',
26 silly addNameRange     '1.17.0',
26 silly addNameRange     '1.17.1',
26 silly addNameRange     '1.17.2',
26 silly addNameRange     '1.17.3',
26 silly addNameRange     '1.18.0',
26 silly addNameRange     '2.0.0',
26 silly addNameRange     '2.0.1',
26 silly addNameRange     '2.1.0',
26 silly addNameRange     '2.2.0',
26 silly addNameRange     '2.2.1',
26 silly addNameRange     '2.2.2',
26 silly addNameRange     '2.2.3',
26 silly addNameRange     '2.2.4',
26 silly addNameRange     '2.2.5',
26 silly addNameRange     '2.2.6',
26 silly addNameRange     '2.3.0',
26 silly addNameRange     '2.3.1',
26 silly addNameRange     '2.4.0',
26 silly addNameRange     '2.4.1',
26 silly addNameRange     '2.4.2',
26 silly addNameRange     '2.4.3',
26 silly addNameRange     '2.5.0',
26 silly addNameRange     '2.5.1',
26 silly addNameRange     '2.6.0',
26 silly addNameRange     '2.6.1',
26 silly addNameRange     '2.7.0',
26 silly addNameRange     '2.7.1',
26 silly addNameRange     '2.7.2',
26 silly addNameRange     '2.7.3',
26 silly addNameRange     '2.7.4',
26 silly addNameRange     '2.8.0',
26 silly addNameRange     '2.8.1',
26 silly addNameRange     '2.9.0',
26 silly addNameRange     '2.10.0',
26 silly addNameRange     '2.10.1',
26 silly addNameRange     '2.10.2',
26 silly addNameRange     '2.11.0',
26 silly addNameRange     '2.12.0',
26 silly addNameRange     '2.12.1',
26 silly addNameRange     '2.12.2',
26 silly addNameRange     '2.12.3',
26 silly addNameRange     '2.12.4',
26 silly addNameRange     '2.12.5',
26 silly addNameRange     '2.13.0',
26 silly addNameRange     '2.13.1',
26 silly addNameRange     '2.13.2',
26 silly addNameRange     '2.13.3',
26 silly addNameRange     '2.14.0',
26 silly addNameRange     '2.14.1',
26 silly addNameRange     '2.14.2',
26 silly addNameRange     '2.15.0',
26 silly addNameRange     '2.16.0',
26 silly addNameRange     '2.17.0',
26 silly addNameRange     '2.17.1',
26 silly addNameRange     '2.17.2',
26 silly addNameRange     '2.17.3',
26 silly addNameRange     '2.17.4',
26 silly addNameRange     '2.18.0',
26 silly addNameRange     '2.18.1',
26 silly addNameRange     '2.19.0',
26 silly addNameRange     '2.20.0',
26 silly addNameRange     '2.20.1',
26 silly addNameRange     '2.20.2',
26 silly addNameRange     '2.21.0',
26 silly addNameRange     '2.22.0',
26 silly addNameRange     '2.23.0',
26 silly addNameRange     '2.23.1',
26 silly addNameRange     '2.24.0',
26 silly addNameRange     '2.24.1',
26 silly addNameRange     '2.24.2',
26 silly addNameRange     '2.24.3',
26 silly addNameRange     '2.25.0',
26 silly addNameRange     '2.25.1',
26 silly addNameRange     '2.26.0',
26 silly addNameRange     '2.27.0',
26 silly addNameRange     '2.27.1',
26 silly addNameRange     '2.28.0',
26 silly addNameRange     '2.29.0',
26 silly addNameRange     '2.29.1',
26 silly addNameRange     '2.30.0',
26 silly addNameRange     '2.31.0',
26 silly addNameRange     '2.32.0',
26 silly addNameRange     '2.32.1',
26 silly addNameRange     '2.32.2',
26 silly addNameRange     '2.32.3',
26 silly addNameRange     '2.32.4',
26 silly addNameRange     '2.33.0',
26 silly addNameRange     '2.33.1',
26 silly addNameRange     '2.34.0',
26 silly addNameRange     '2.34.1',
26 silly addNameRange     '2.34.2',
26 silly addNameRange     '2.34.3',
26 silly addNameRange     '2.35.0' ] ]
27 verbose addNamed [ 'browserify', '2.35.0' ]
28 verbose addNamed [ '2.35.0', '2.35.0' ]
29 silly lockFile 1db404dd-browserify-2-35-0 browserify@2.35.0
30 verbose lock browserify@2.35.0 /Users/coreywalsh/.npm/1db404dd-browserify-2-35-0.lock
31 silly lockFile 1db404dd-browserify-2-35-0 browserify@2.35.0
32 silly lockFile 1db404dd-browserify-2-35-0 browserify@2.35.0
33 silly lockFile 80140245-browserify browserify@
34 silly lockFile 80140245-browserify browserify@
35 silly resolved [ { name: 'browserify',
35 silly resolved     version: '2.35.0',
35 silly resolved     description: 'browser-side require() the node way',
35 silly resolved     main: 'index.js',
35 silly resolved     bin: { browserify: 'bin/cmd.js' },
35 silly resolved     repository:
35 silly resolved      { type: 'git',
35 silly resolved        url: 'http://github.com/substack/node-browserify.git' },
35 silly resolved     keywords:
35 silly resolved      [ 'browser',
35 silly resolved        'require',
35 silly resolved        'commonjs',
35 silly resolved        'commonj-esque',
35 silly resolved        'bundle',
35 silly resolved        'npm',
35 silly resolved        'javascript' ],
35 silly resolved     dependencies:
35 silly resolved      { 'module-deps': '~1.0.2',
35 silly resolved        'browser-pack': '~0.11.0',
35 silly resolved        'deps-sort': '~0.1.1',
35 silly resolved        'shell-quote': '~0.0.1',
35 silly resolved        through: '~2.3.4',
35 silly resolved        duplexer: '~0.1.1',
35 silly resolved        'stream-combiner': '~0.0.2',
35 silly resolved        'concat-stream': '~1.0.0',
35 silly resolved        'insert-module-globals': '~1.3.0',
35 silly resolved        'syntax-error': '~0.0.0',
35 silly resolved        'browser-resolve': '~1.1.0',
35 silly resolved        'browser-builtins': '2.0.5',
35 silly resolved        inherits: '~1.0.0',
35 silly resolved        optimist: '~0.5.1',
35 silly resolved        JSONStream: '~0.6.4',
35 silly resolved        umd: '~1.3.0',
35 silly resolved        parents: '~0.0.1',
35 silly resolved        'deep-equal': '~0.1.0' },
35 silly resolved     devDependencies:
35 silly resolved      { tap: '~0.4.0',
35 silly resolved        mkdirp: '~0.3.3',
35 silly resolved        backbone: '~0.9.2',
35 silly resolved        dnode: '~1.0.3',
35 silly resolved        seq: '0.3.3',
35 silly resolved        'coffee-script': '~1.5.0' },
35 silly resolved     author:
35 silly resolved      { name: 'James Halliday',
35 silly resolved        email: 'mail@substack.net',
35 silly resolved        url: 'http://substack.net' },
35 silly resolved     scripts: { test: 'tap test/*.js' },
35 silly resolved     license: 'MIT',
35 silly resolved     readme: '# browserify\n\n`require(\'modules\')` in the browser\n\nUse a [node](http://nodejs.org)-style `require()` to organize your browser code\nand load modules installed by [npm](https://npmjs.org).\n\nbrowserify will recursively analyze all the `require()` calls in your app in\norder to build a bundle you can serve up to the browser in a single `<script>`\ntag.\n\n[![build status](https://secure.travis-ci.org/substack/node-browserify.png)](http://travis-ci.org/substack/node-browserify)\n\n![browserify!](http://substack.net/images/browserify_logo.png)\n\n# example\n\nWhip up a file, `main.js` with some `require()s` in it. You can use relative\npaths like `\'./foo.js\'` and `\'../lib/bar.js\'` or module paths like `\'gamma\'`\nthat will search `node_modules/` using\n[node\'s module lookup algorithm](https://github.com/substack/node-resolve).\n\n``` js\nvar foo = require(\'./foo.js\');\nvar bar = require(\'../lib/bar.js\');\nvar gamma = require(\'gamma\');\n\nvar elem = document.getElementById(\'result\');\nvar x = foo(100) + bar(\'baz\');\nelem.textContent = gamma(x);\n```\n\nExport functionality by assigning onto `module.exports` or `exports`:\n\n``` js\nmodule.exports = function (n) { return n * 111 }\n```\n\nNow just use the `browserify` command to build a bundle starting at `main.js`:\n\n```\n$ browserify main.js > bundle.js\n```\n\nAll of the modules that `main.js` needs are included in the `bundle.js` from a\nrecursive walk of the `require()` graph using\n[required](https://github.com/shtylman/node-required).\n\nTo use this bundle, just toss a `<script src="bundle.js"></script>` into your\nhtml!\n\n## external requires\n\nYou can just as easily create bundle that will export a `require()` function so\nyou can `require()` modules from another script tag. Here we\'ll create a\n`bundle.js` with the [through](https://npmjs.org/package/through)\nand [duplexer](https://npmjs.org/package/duplexer) modules.\n\n```\n$ browserify -r through -r duplexer > bundle.js\n```\n\nThen in your page you can do:\n\n``` js\n<script src="bundle.js"></script>\n<script>\n  var through = require(\'through\');\n  var duplexer = require(\'duplexer\');\n  /* ... */\n</script>\n```\n\n## multiple bundles\n\nIf browserify finds a `require` function already defined in the page scope, it\nwill fall back to that function if it didn\'t find any matches in its own set of\nbundled modules.\n\nIn this way you can use browserify to split up bundles among multiple pages to\nget the benefit of caching for shared, infrequently-changing modules, while\nstill being able to use `require()`. Just use a combination of `--external` and\n`--require` to factor out common dependencies.\n\nFor example, if a website with 2 pages, `beep.js`:\n\n``` js\nvar robot = require(\'./robot.js\');\nconsole.log(robot(\'beep\'));\n```\n\nand `boop.js`:\n\n``` js\nvar robot = require(\'./robot.js\');\nconsole.log(robot(\'boop\'));\n```\n\nboth depend on `robot.js`:\n\n``` js\nmodule.exports = function (s) { return s.toUpperCase() + \'!\' };\n```\n\n```\n$ browserify -r ./robot > static/common.js\n$ browserify -x ./robot.js beep.js > static/beep.js\n$ browserify -x ./robot.js boop.js > static/boop.js\n```\n\nThen on the beep page you can have:\n\n``` html\n<script src="common.js"></script>\n<script src="beep.js"></script>\n```\n\nwhile the boop page can have:\n\n``` html\n<script src="common.js"></script>\n<script src="boop.js"></script>\n```\n\n## api example\n\nYou can use the API directly too:\n\n``` js\nvar browserify = require(\'browserify\');\nvar b = browserify();\nb.add(\'./browser/main.js\');\nb.bundle().pipe(process.stdout);\n```\n\n# usage\n\n```\nUsage: browserify [entry files] {OPTIONS}\n\nStandard Options:\n\n    --outfile, -o  Write the browserify bundle to this file.\n                   If unspecified, browserify prints to stdout.\n\n    --require, -r  A module name or file to bundle.require()\n                   Optionally use a colon separator to set the target.\n\n      --entry, -e  An entry point of your app\n  \n     --ignore, -i  Omit a file from the output bundle.\n\n   --external, -x  Reference a file from another bundle.\n  \n  --transform, -t  Use a transform module on top-level files.\n\n  --extension      Consider files with specified extension as modules.\n \n    --command, -c  Use a transform command on top-level files.\n   \n  --standalone -s  Generate a UMD bundle for the supplied export name.\n                   This bundle works with other module systems and sets the name\n                   given as a window global if no module system is found.\n  \n       --debug -d  Enable source maps that allow you to debug your files\n                   separately.\n\n       --help, -h  Show this message\n\nFor advanced options, type `browserify help advanced`.\n\nSpecify a parameter.\n```\n\n```\nAdvanced Options:\n\n  --insert-globals, --ig, --fast    [default: false]\n\n    Skip detection and always insert definitions for process, global,\n    __filename, and __dirname.\n                  \n    benefit: faster builds\n    cost: extra bytes\n \n  --detect-globals, --dg            [default: true]\n\n    Detect the presence of process, global, __filename, and __dirname and define\n    these values when present.\n\n    benefit: npm modules more likely to work\n    cost: slower builds\n\n  --ignore-missing, --im            [default: false]\n\n    Ignore `require()` statements that don\'t resolve to anything.\n\n  --noparse=FILE\n\n    Don\'t parse FILE at all. This will make bundling much, much faster for giant\n    libs like jquery or threejs.\n\n  --deps\n  \n    Instead of standard bundle output, print the dependency array generated by\n    module-deps.\n\n  --list\n \n    Print each file in the dependency graph. Useful for makefiles.\n\n```\n\n# compatibility\n\nMany [npm](http://npmjs.org) modules that don\'t do IO will just work after being\nbrowserified. Others take more work.\n\nMany node built-in modules have been wrapped to work in the browser, but only\nwhen you explicitly `require()` or use their functionality.\n\nWhen you `require()` any of these modules, you will get a browser-specific shim:\n\n* events\n* stream\n* path\n* assert\n* url\n* util\n* querystring\n* buffer\n* buffer_ieee754\n* console\n* [vm](https://github.com/substack/vm-browserify)\n* [http](https://github.com/substack/http-browserify)\n* [crypto](https://github.com/dominictarr/crypto-browserify)\n* [zlib](https://github.com/brianloveswords/zlib-browserify)\n\nAdditionally if you use any of these variables, they\n[will be defined](https://github.com/substack/insert-module-globals)\nin the bundled output in a browser-appropriate way:\n\n* [process](https://github.com/shtylman/node-process)\n* [Buffer](https://github.com/toots/buffer-browserify)\n* global - top-level scope object (window)\n* __filename - file path of the currently executing file\n* __dirname - directory path of the currently executing file\n\n# methods\n\n``` js\nvar browserify = require(\'browserify\')\n```\n\n## var b = browserify(files=[] or opts={})\n\nCreate a browserify instance `b` from the entry main `files` or `opts.entries`.\n`files` can be an array of files or a single file.\n\nFor each `file` in `files`, if `file` is a stream, its contents will be used.\nYou should use `opts.basedir` when using streaming files so that relative\nrequires will know where to resolve from.\n\nYou can also specify an `opts.noParse` array which will skip all require() and\nglobal parsing for each file in the array. Use this for giant libs like jquery\nor threejs that don\'t have any requires or node-style globals but take forever\nto parse.\n\n`opts.extensions` is an array of optional extra extensions for the module lookup\nmachinery to use when the extension has not been specified.\nBy default browserify considers only `.js` and `.json` files in such cases.\n\nNote that if files do not contain javascript source code then you also need to\nspecify a corresponding transform for them.\n\n## b.add(file)\n\nAdd an entry file from `file` that will be executed when the bundle loads.\n\n## b.require(file[, opts])\n\nMake `file` available from outside the bundle with `require(file)`.\n\nThe `file` param is anything that can be resolved by `require.resolve()`.\n\n`file` can also be a stream, but you should also use `opts.basedir` so that\nrelative requires will be resolvable.\n\nUse the `expose` property of opts to specify a custom dependency name. \n`require(\'./vendor/angular/angular.js\', {expose: \'angular\'})` enables `require(\'angular\')`\n\n## b.bundle(opts, cb)\n\nBundle the files and their dependencies into a single javascript file.\n\nReturn a readable stream with the javascript file contents or\noptionally specify a `cb(err, src)` to get the buffered results.\n\nWhen `opts.insertGlobals` is true, always insert `process`, `global`,\n`__filename`, and `__dirname` without analyzing the AST for faster builds but\nlarger output bundles. Default false.\n\nWhen `opts.detectGlobals` is true, scan all files for `process`, `global`,\n`__filename`, and `__dirname`, defining as necessary. With this option npm\nmodules are more likely to work but bundling takes longer. Default true.\n\nWhen `opts.debug` is true, add a source map inline to the end of the bundle.\nThis makes debugging easier because you can see all the original files if\nyou are in a modern enough browser.\n\nWhen `opts.standalone` is a non-empty string, a standalone module is created\nwith that name and a [umd](https://github.com/forbeslindesay/umd) wrapper.\n\n`opts.insertGlobalVars` will be passed to\n[insert-module-globals](http://npmjs.org/package/insert-module-globals)\nas the `opts.vars` parameter.\n\n## b.external(file)\n\nPrevent `file` from being loaded into the current bundle, instead referencing\nfrom another bundle.\n\n## b.ignore(file)\n\nPrevent the module name or file at `file` from showing up in the output bundle.\n\n## b.transform(tr)\n\nTransform source code before parsing it for `require()` calls with the transform\nfunction or module name `tr`.\n\nIf `tr` is a function, it will be called with `tr(file)` and it should return a\n[through-stream](https://github.com/substack/stream-handbook#through)\nthat takes the raw file contents and produces the transformed source.\n\nIf `tr` is a string, it should be a module name or file path of a\n[transform module](https://github.com/substack/module-deps#transforms)\nwith a signature of:\n\n``` js\nvar through = require(\'through\');\nmodule.exports = function (file) { return through() };\n```\n\nYou don\'t need to necessarily use the\n[through](https://npmjs.org/package/through) module, this is just a simple\nexample.\n\nHere\'s how you might compile coffee script on the fly using `.transform()`:\n\n```\nvar coffee = require(\'coffee-script\');\nvar through = require(\'through\');\n\nb.transform(function (file) {\n    var data = \'\';\n    return through(write, end);\n    \n    function write (buf) { data += buf }\n    function end () {\n        this.queue(coffee.compile(data));\n        this.queue(null);\n    }\n});\n```\n\nNote that on the command-line with the `-c` flag you can just do:\n\n```\n$ browserify -c \'coffee -sc\' main.coffee > bundle.js\n```\n\nOr better still, use the [coffeeify](https://github.com/substack/coffeeify)\nmodule:\n\n```\n$ npm install coffeeify\n$ browserify -t coffeeify main.coffee > bundle.js\n```\n\n# package.json\n\nbrowserify uses the `package.json` in its module resolution algorithm just like\nnode, but there is a special\n"[browser](https://gist.github.com/4339901)" field you can set to override file\nresolution for browser-specific versions.\n\nYou can specify source transforms in the package.json in the\n`browserify.transform` field. There is more information about how source\ntransforms work in package.json on the\n[module-deps readme](https://github.com/substack/module-deps#transforms).\n\n# events\n\n## b.on(\'file\', function (file, id, parent) {})\n\nWhen a file is resolved for the bundle, the bundle emits a `\'file\'` event with\nthe full `file` path, the `id` string passed to `require()`, and the `parent`\nobject used by\n[browser-resolve](https://github.com/shtylman/node-browser-resolve).\n\nYou could use the `file` event to implement a file watcher to regenerate bundles\nwhen files change.\n\n# list of source transforms\n\nHere is a list of known source transforms:\n\n* [blissify](https://github.com/agilemd/blissify) - compile `.html` \nfiles written using [bliss](https://github.com/cstivers78/bliss)\n\n* [brfs](https://github.com/substack/brfs) - inline\n`fs.readFileSync()` calls with file contents\n\n* [caching-coffeeify](https://github.com/thlorenz/caching-coffeeify) - coffeeify\nversion that caches previously compiled files to optimize the compilation step\n\n* [coffeeify](https://github.com/jnordberg/coffeeify) - compile\n`.coffee` files to javascript automatically\n\n* [deAMDify](https://github.com/jaredhanson/deamdify) - translate AMD modules\nto Node-style modules automatically\n\n* [debowerify](https://github.com/eugeneware/debowerify) - use\n[bower](http://bower.io) client packages more easily with browserify.\n\n* [decomponentify](https://github.com/eugeneware/decomponentify) - use\n[component](https://github.com/component/component) client packages seamlessly\nwith browserify.\n\n* [es6ify](https://github.com/thlorenz/es6ify) - compile ES6 files to\nES5 javascript automatically\n\n* [hbsfy](https://github.com/epeli/node-hbsfy) - precompile handlebars\ntemplates to javascript functions automatically\n\n* [icsify](https://github.com/maxtaco/icsify) - compile\n`.iced` IcedCoffeeScript files to javascript automatically\n\n* [liveify](https://github.com/quarterto/liveify) - compile livescript files to\njavascript automatically\n\n* [rfileify](https://github.com/ForbesLindesay/rfileify) - inline `rfile(path)`\ncalls with file contents\n(also supports `ruglify` and any other `rfile` derivatives)\n\n* [rfolderify](https://github.com/quarterto/rfolderify) - turn calls to rfolder\ninto a map of requires of the files in the thing\n\n* [turn](https://github.com/juliangruber/turn) - minimal modules for a\nhypothetical es6 with lua\'s return\n\n\n* [reactify](https://github.com/andreypopp/reactify) - compile JSX (superset of\n  javascript used in [react](http://facebook.github.io/react/) UI library) files\n  to javascript\n\n# third-party tools\n\nIf you want to efficiently re-compile the bundle automatically when you edit\nfiles, you can use [watchify](https://github.com/substack/watchify).\n\nIf you are using express or connect, you can use\n[enchilada](https://github.com/shtylman/node-enchilada) or\n[browserify-middleware](https://github.com/ForbesLindesay/browserify-middleware)\nto host your bundles as middleware.\n\nIf you want a standalone web server for development that will create bundles on\ndemand, check out [beefy](https://github.com/chrisdickinson/beefy).\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install -g browserify\n```\n\n# license\n\nMIT\n\n![browserify!](http://substack.net/images/browserify/browserify.png)\n',
35 silly resolved     readmeFilename: 'readme.markdown',
35 silly resolved     bugs: { url: 'https://github.com/substack/node-browserify/issues' },
35 silly resolved     _id: 'browserify@2.35.0',
35 silly resolved     _from: 'browserify@' } ]
36 info install browserify@2.35.0 into /usr/local/lib
37 info installOne browserify@2.35.0
38 info /usr/local/lib/node_modules/browserify unbuild
39 verbose tar unpack /Users/coreywalsh/.npm/browserify/2.35.0/package.tgz
40 silly lockFile 1b5a9d3b-ocal-lib-node-modules-browserify tar:///usr/local/lib/node_modules/browserify
41 verbose lock tar:///usr/local/lib/node_modules/browserify /Users/coreywalsh/.npm/1b5a9d3b-ocal-lib-node-modules-browserify.lock
42 silly lockFile 8236b65b-pm-browserify-2-35-0-package-tgz tar:///Users/coreywalsh/.npm/browserify/2.35.0/package.tgz
43 verbose lock tar:///Users/coreywalsh/.npm/browserify/2.35.0/package.tgz /Users/coreywalsh/.npm/8236b65b-pm-browserify-2-35-0-package-tgz.lock
44 silly gunzTarPerm modes [ '755', '644' ]
45 error Error: EACCES, mkdir '/usr/local/lib/node_modules/browserify'
45 error  { [Error: EACCES, mkdir '/usr/local/lib/node_modules/browserify']
45 error   errno: 3,
45 error   code: 'EACCES',
45 error   path: '/usr/local/lib/node_modules/browserify',
45 error   fstream_type: 'Directory',
45 error   fstream_path: '/usr/local/lib/node_modules/browserify',
45 error   fstream_class: 'DirWriter',
45 error   fstream_stack:
45 error    [ '/usr/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23',
45 error      '/usr/local/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53',
45 error      'Object.oncomplete (fs.js:107:15)' ] }
46 error Please try running this command again as root/Administrator.
47 error System Darwin 12.1.0
48 error command "node" "/usr/local/bin/npm" "install" "-g" "browserify"
49 error cwd /Users/coreywalsh/Sites/twitter-mining
50 error node -v v0.10.21
51 error npm -v 1.3.11
52 error path /usr/local/lib/node_modules/browserify
53 error fstream_path /usr/local/lib/node_modules/browserify
54 error fstream_type Directory
55 error fstream_class DirWriter
56 error code EACCES
57 error errno 3
58 error stack Error: EACCES, mkdir '/usr/local/lib/node_modules/browserify'
59 error fstream_stack /usr/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23
59 error fstream_stack /usr/local/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53
59 error fstream_stack Object.oncomplete (fs.js:107:15)
60 verbose exit [ 3, true ]
